{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#kotlin-architecture-guidelines","title":"Kotlin Architecture Guidelines","text":"<p>This is a set of guidelines and recommendations for kotlin gradle applications</p>"},{"location":"feature/compose/","title":"Compose","text":""},{"location":"feature/compose/#compose-code-convention","title":"Compose Code Convention","text":"<pre><code>\u251c\u2500\u2500 components                  # Shared Components: [Dialog, View, Widget]\n\u251c\u2500\u2500 feature           \n\u2502   \u251c\u2500\u2500 components              # Folder with components of current screen\n\u2502   \u2502   \u251c\u2500\u2500 AuthButtonWidget    # Authorize button\n\u2502   \u2502   \u251c\u2500\u2500 AuthCardWidget      # Card, which contains two fields: Login and Password\n\u2502   \u2502   \u2514\u2500\u2500 AuthSuccessDialog   # Dialog, which is showed after successfull auth\n\u2502   \u251c\u2500\u2500 preview                 # Folder with Preview\n\u2502   \u2502   \u2514\u2500\u2500 AuthScreenPreview   # Preview of Auth screen\n\u2502   \u251c\u2500\u2500 AuthScreen              # Authorize Screen which use State Hoisting\n\u2514\u2500\u2500 \u2514\u2500\u2500 AuthScreenComponent     # Authorized Screen Component which accept ViewModel\n</code></pre>"},{"location":"feature/feature/","title":"Feature","text":""},{"location":"feature/feature/#in-feature-architecture-convention","title":"In-Feature Architecture Convention","text":"<pre><code>\u251c\u2500\u2500 util                        # Core util package\n\u251c\u2500\u2500 feature           \n\u2502   \u251c\u2500\u2500 data              \n\u2502   \u2502   \u251c\u2500\u2500 model       \n\u2502   \u2502   \u251c\u2500\u2500 mapping              \n\u2502   \u2502   \u2502   \u2514\u2500\u2500 MyMapper    \n\u2502   \u2502   \u251c\u2500\u2500 impl              \n\u2502   \u2502   \u2502   \u2514\u2500\u2500 MyRepositoryImpl    \n\u2502   \u2502   \u2514\u2500\u2500 MyRepository    \n\u2502   \u251c\u2500\u2500 domain              \n\u2502   \u2502   \u251c\u2500\u2500 model       \n\u2502   \u2502   \u251c\u2500\u2500 mapping      \n\u2502   \u2502   \u2514\u2500\u2500 usecase  \n\u2502   \u251c\u2500\u2500 di              \n\u2502   \u2502   \u251c\u2500\u2500 factory              \n\u2502   \u2502   \u2502   \u2514\u2500\u2500 MyCustomFactory    \n\u2502   \u2502   \u2514\u2500\u2500 MyModule  \n\u2502   \u251c\u2500\u2500 presentation              \n\u2502   \u2502   \u2514\u2500\u2500 AuthViewModel    \n\u2514\u2500\u2500 \u2514\u2500\u2500 util\n</code></pre>"},{"location":"gradle/","title":"Structure","text":""},{"location":"gradle/#gradle-project-structure","title":"Gradle Project structure","text":"<pre><code>\u251c\u2500\u2500 XXX-gradle-project          # Other gradle projects/subprojects/build-logic\n\u251c\u2500\u2500 YYY-gradle-project          # Other gradle projects/subprojects/build-logic\n\u251c\u2500\u2500 instances            \n\u2502   \u251c\u2500\u2500 app                       # Android app instance\n\u2502   \u251c\u2500\u2500 desktop                   # Desktop app instance\n\u2502   \u2514\u2500\u2500 wear                      # Wear os instance\n\u251c\u2500\u2500 modules\n\u2502   \u251c\u2500\u2500 components                  \n\u2502   |   \u251c\u2500\u2500 UserComponent         # Component which provides current user\n\u2502   |   \u2514\u2500\u2500 XXXXXX                # Other component\n\u2502   \u251c\u2500\u2500 features                  \n\u2502   |   \u251c\u2500\u2500 Splash                # Splash feature\n\u2502   |   \u2514\u2500\u2500 XXXXXX                # Some other feature\n\u2502   \u251c\u2500\u2500 services                  \n\u2502   |   \u251c\u2500\u2500 resources             # Shared resources\n\u2502   |   \u2514\u2500\u2500 XXXXXX                # Some other service module\n</code></pre>"},{"location":"gradle/#1-other-gradle-projects","title":"1. Other gradle projects","text":"<p><code>:XXX-gradle-project</code> can be any other gradle project which included in the root project</p> <p>Example: build-logic, custom included git repo</p>"},{"location":"gradle/#2-instances","title":"2. Instances","text":"<p><code>:instances</code> store application instances for various platform: android, ios, desktop etc...</p>"},{"location":"gradle/#3-modules","title":"3. Modules","text":"<p><code>:modules</code> store app-specific modules</p>"},{"location":"gradle/#4-services","title":"4. Services","text":"<p><code>:modules:services</code> can only be dependent on each other</p> <p><code>:modules:services</code> can be dependent on other gradle projects as they represent custom library</p> <p><code>:modules:services</code> modules can't have ViewModel's, but can have basic implementation of it</p> <p><code>:modules:services</code> is basically utilities for application</p> <p>Example:</p> <ul> <li><code>:services:resource</code> - contains all resources for application</li> <li><code>:services:core</code> - contains shared functions for all features, BaseViewModel etc...</li> <li><code>:services:api-backend</code> - contains auto-generated backend api</li> </ul>"},{"location":"gradle/#5-features","title":"5. Features","text":"<p><code>:modules:features</code> Ideally can't be dependent on each other</p> <p><code>:modules:features</code> can see services modules and components modules</p> <p><code>:modules:features</code> is an implementation for some feature, Splash screen, Auth screen etc...</p> <p><code>:modules:features</code> Ideally should contain only one entry point, which can be Composable screen for example</p>"},{"location":"gradle/#6-components-experimental","title":"6. Components [EXPERIMENTAL]","text":"<p><code>:modules:components</code> are required to make feature modules fully independent of each others</p> <p><code>:modules:components</code> modules can't be dependent on each other</p> <p><code>:modules:components</code> modules is a set of reusable logic or ui parts</p>"},{"location":"gradle/#want-to-see-more-detailed-use-navigation-on-left","title":"Want to see more detailed? Use navigation on left!","text":""},{"location":"gradle/services/","title":"Services","text":""},{"location":"gradle/services/#services-overview","title":"Services overview","text":"<pre><code>\u251c\u2500\u2500 ...\n\u251c\u2500\u2500 modules\n\u2502   \u251c\u2500\u2500 services\n\u2502   |   \u251c\u2500\u2500 build-config\n\u2502   \u2502   |   \u2514\u2500\u2500 build.gradle.kts\n\u2502   |   \u251c\u2500\u2500 api-v1\n\u2502   |   \u251c\u2500\u2500 resources\n\u2502   |   \u2514\u2500\u2500 core\n</code></pre> <p>As it was mentioned previously, services is basically application utility modules</p>"},{"location":"gradle/services/#1-build-config-service-module","title":"1. Build config service module","text":"<p>For example, we have <code>:build-config</code> module, which will contain only <code>build.gradle.kts</code> plugin for <code>BuildKonfig</code> creation</p> <pre><code>plugins {\n    kotlin(\"jvm\")\n    id(\"com.github.gmazzo.buildconfig\")\n}\n\nbuildConfig {\n    className(\"BuildKonfig\")\n    packageName(\"com.myproject.sample.buildkonfig\")\n    buildConfigStringField(\"MY_SECRET_KEY\", \"\\\"Wow! It's really secret!\\\"\")\n}\n</code></pre> <p>This module, <code>:build-config</code> is fully independent.</p> <p>Furthermore, it's fully reusable in other projects!</p> <p>And of course, it can be reused in other project modules.</p> <p>So, eventually, with this gradle project architecture, we have reusable fully independent gradle module for our project.</p>"},{"location":"gradle/services/#2-resources-service-module","title":"2. Resources service module","text":"<p>Usually, resource of the project are reused by other modules.</p> <p>So here, in <code>:resources</code>, we can extract our shared resources like themes, splash, colors, some drawables and etc.</p> <p>Of course feature-modules will contain some specific string resources or drawables.</p>"},{"location":"gradle/services/#3-core-services-module","title":"3. Core services module","text":"<p>Core services module may contain basic extension for application.</p> <p>For example, BaseViewModel, BaseRepository, StringProvider and etc.</p>"},{"location":"gradle/services/#4-api-v1","title":"4. api-v1","text":"<p><code>:api-v1</code> can be any swagger-generated api of your backend.</p> <p>It shouldn't contain any repositories.</p> <p>It can contain custom token interceptor logic etc if needed.</p>"}]}